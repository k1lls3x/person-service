basePath: /
definitions:
  entity.Person:
    properties:
      age:
        type: integer
      created_at:
        type: string
      gender:
        type: string
      id:
        type: integer
      name:
        type: string
      nationality:
        type: string
      patronymic:
        type: string
      surname:
        type: string
      updated_at:
        type: string
    required:
    - name
    - surname
    type: object
host: localhost:8888
info:
  contact: {}
  description: REST API для сервиса обогащения ФИО возрастом, полом и национальностью
  title: Person Service API
  version: "1.0"
paths:
  /api/persons:
    get:
      consumes:
      - application/json
      parameters:
      - description: Имя
        in: query
        name: name
        type: string
      - description: Фамилия
        in: query
        name: surname
        type: string
      - description: Пол
        in: query
        name: gender
        type: string
      - description: Национальность
        in: query
        name: nationality
        type: string
      - description: Мин. возраст
        in: query
        name: minAge
        type: integer
      - description: Макс. возраст
        in: query
        name: maxAge
        type: integer
      - description: Страница
        in: query
        name: page
        type: integer
      - description: Размер страницы
        in: query
        name: pageSize
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/entity.Person'
            type: array
      summary: Получить список людей с фильтрами и пагинацией
      tags:
      - persons
    post:
      consumes:
      - application/json
      description: Добавляет человека с обогащением через внешние API
      parameters:
      - description: Персона
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/entity.Person'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/entity.Person'
        "400":
          description: bad request
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: Создать нового человека
      tags:
      - persons
  /api/persons/{id}:
    delete:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
          schema:
            type: string
        "400":
          description: bad request
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: Удалить человека по id
      tags:
      - persons
    put:
      consumes:
      - application/json
      parameters:
      - description: ID
        in: path
        name: id
        required: true
        type: integer
      - description: Новые данные
        in: body
        name: person
        required: true
        schema:
          $ref: '#/definitions/entity.Person'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/entity.Person'
        "400":
          description: bad request
          schema:
            type: string
        "404":
          description: not found
          schema:
            type: string
        "500":
          description: server error
          schema:
            type: string
      summary: Обновить данные человека по id
      tags:
      - persons
swagger: "2.0"
